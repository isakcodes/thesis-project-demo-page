{"mappings":"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","sources":["<anon>","assets/js/index.js","node_modules/focus-visible/dist/focus-visible.js","node_modules/html-midi-player/dist/esm/index.js","core.js"],"sourcesContent":["(() => {\nvar $eb489e29877f21f9$exports = {};\n(function(global, factory) {\n    factory();\n})($eb489e29877f21f9$exports, function() {\n    \"use strict\";\n    /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */ function applyFocusVisiblePolyfill(scope) {\n        var hadKeyboardEvent = true;\n        var hadFocusVisibleRecently = false;\n        var hadFocusVisibleRecentlyTimeout = null;\n        var inputTypesAllowlist = {\n            text: true,\n            search: true,\n            url: true,\n            tel: true,\n            email: true,\n            password: true,\n            number: true,\n            date: true,\n            month: true,\n            week: true,\n            time: true,\n            datetime: true,\n            \"datetime-local\": true\n        };\n        /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */ function isValidFocusTarget(el) {\n            if (el && el !== document && el.nodeName !== \"HTML\" && el.nodeName !== \"BODY\" && \"classList\" in el && \"contains\" in el.classList) return true;\n            return false;\n        }\n        /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */ function focusTriggersKeyboardModality(el) {\n            var type = el.type;\n            var tagName = el.tagName;\n            if (tagName === \"INPUT\" && inputTypesAllowlist[type] && !el.readOnly) return true;\n            if (tagName === \"TEXTAREA\" && !el.readOnly) return true;\n            if (el.isContentEditable) return true;\n            return false;\n        }\n        /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */ function addFocusVisibleClass(el) {\n            if (el.classList.contains(\"focus-visible\")) return;\n            el.classList.add(\"focus-visible\");\n            el.setAttribute(\"data-focus-visible-added\", \"\");\n        }\n        /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */ function removeFocusVisibleClass(el) {\n            if (!el.hasAttribute(\"data-focus-visible-added\")) return;\n            el.classList.remove(\"focus-visible\");\n            el.removeAttribute(\"data-focus-visible-added\");\n        }\n        /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */ function onKeyDown(e) {\n            if (e.metaKey || e.altKey || e.ctrlKey) return;\n            if (isValidFocusTarget(scope.activeElement)) addFocusVisibleClass(scope.activeElement);\n            hadKeyboardEvent = true;\n        }\n        /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */ function onPointerDown(e) {\n            hadKeyboardEvent = false;\n        }\n        /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */ function onFocus(e) {\n            // Prevent IE from focusing the document or HTML element.\n            if (!isValidFocusTarget(e.target)) return;\n            if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) addFocusVisibleClass(e.target);\n        }\n        /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */ function onBlur(e) {\n            if (!isValidFocusTarget(e.target)) return;\n            if (e.target.classList.contains(\"focus-visible\") || e.target.hasAttribute(\"data-focus-visible-added\")) {\n                // To detect a tab/window switch, we look for a blur event followed\n                // rapidly by a visibility change.\n                // If we don't see a visibility change within 100ms, it's probably a\n                // regular focus change.\n                hadFocusVisibleRecently = true;\n                window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n                hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n                    hadFocusVisibleRecently = false;\n                }, 100);\n                removeFocusVisibleClass(e.target);\n            }\n        }\n        /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */ function onVisibilityChange(e) {\n            if (document.visibilityState === \"hidden\") {\n                // If the tab becomes active again, the browser will handle calling focus\n                // on the element (Safari actually calls it twice).\n                // If this tab change caused a blur on an element with focus-visible,\n                // re-apply the class when the user switches back to the tab.\n                if (hadFocusVisibleRecently) hadKeyboardEvent = true;\n                addInitialPointerMoveListeners();\n            }\n        }\n        /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */ function addInitialPointerMoveListeners() {\n            document.addEventListener(\"mousemove\", onInitialPointerMove);\n            document.addEventListener(\"mousedown\", onInitialPointerMove);\n            document.addEventListener(\"mouseup\", onInitialPointerMove);\n            document.addEventListener(\"pointermove\", onInitialPointerMove);\n            document.addEventListener(\"pointerdown\", onInitialPointerMove);\n            document.addEventListener(\"pointerup\", onInitialPointerMove);\n            document.addEventListener(\"touchmove\", onInitialPointerMove);\n            document.addEventListener(\"touchstart\", onInitialPointerMove);\n            document.addEventListener(\"touchend\", onInitialPointerMove);\n        }\n        function removeInitialPointerMoveListeners() {\n            document.removeEventListener(\"mousemove\", onInitialPointerMove);\n            document.removeEventListener(\"mousedown\", onInitialPointerMove);\n            document.removeEventListener(\"mouseup\", onInitialPointerMove);\n            document.removeEventListener(\"pointermove\", onInitialPointerMove);\n            document.removeEventListener(\"pointerdown\", onInitialPointerMove);\n            document.removeEventListener(\"pointerup\", onInitialPointerMove);\n            document.removeEventListener(\"touchmove\", onInitialPointerMove);\n            document.removeEventListener(\"touchstart\", onInitialPointerMove);\n            document.removeEventListener(\"touchend\", onInitialPointerMove);\n        }\n        /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */ function onInitialPointerMove(e) {\n            // Work around a Safari quirk that fires a mousemove on <html> whenever the\n            // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n            if (e.target.nodeName && e.target.nodeName.toLowerCase() === \"html\") return;\n            hadKeyboardEvent = false;\n            removeInitialPointerMoveListeners();\n        }\n        // For some kinds of state, we are interested in changes at the global scope\n        // only. For example, global pointer input, global key presses and global\n        // visibility change should affect the state at every scope:\n        document.addEventListener(\"keydown\", onKeyDown, true);\n        document.addEventListener(\"mousedown\", onPointerDown, true);\n        document.addEventListener(\"pointerdown\", onPointerDown, true);\n        document.addEventListener(\"touchstart\", onPointerDown, true);\n        document.addEventListener(\"visibilitychange\", onVisibilityChange, true);\n        addInitialPointerMoveListeners();\n        // For focus and blur, we specifically care about state changes in the local\n        // scope. This is because focus / blur events that originate from within a\n        // shadow root are not re-dispatched from the host element if it was already\n        // the active element in its own scope:\n        scope.addEventListener(\"focus\", onFocus, true);\n        scope.addEventListener(\"blur\", onBlur, true);\n        // We detect that a node is a ShadowRoot by ensuring that it is a\n        // DocumentFragment and also has a host property. This check covers native\n        // implementation and polyfill implementation transparently. If we only cared\n        // about the native implementation, we could just check if the scope was\n        // an instance of a ShadowRoot.\n        if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n        // have a root element to add a class to. So, we add this attribute to the\n        // host element instead:\n        scope.host.setAttribute(\"data-js-focus-visible\", \"\");\n        else if (scope.nodeType === Node.DOCUMENT_NODE) {\n            document.documentElement.classList.add(\"js-focus-visible\");\n            document.documentElement.setAttribute(\"data-js-focus-visible\", \"\");\n        }\n    }\n    // It is important to wrap all references to global window and document in\n    // these checks to support server-side rendering use cases\n    // @see https://github.com/WICG/focus-visible/issues/199\n    if (typeof window !== \"undefined\" && typeof document !== \"undefined\") {\n        // Make the polyfill helper globally available. This can be used as a signal\n        // to interested libraries that wish to coordinate with the polyfill for e.g.,\n        // applying the polyfill to a shadow root:\n        window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\n        // Notify interested libraries of the polyfill's presence, in case the\n        // polyfill was loaded lazily:\n        var event;\n        try {\n            event = new CustomEvent(\"focus-visible-polyfill-ready\");\n        } catch (error) {\n            // IE11 does not support using CustomEvent as a constructor directly:\n            event = document.createEvent(\"CustomEvent\");\n            event.initCustomEvent(\"focus-visible-polyfill-ready\", false, false, {});\n        }\n        window.dispatchEvent(event);\n    }\n    if (typeof document !== \"undefined\") // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n});\n\n\n/**\n * html-midi-player@1.5.0\n * https://github.com/cifkao/html-midi-player.git\n * @author Ondřej Cífka (@cifkao)\n * @license BSD-2-Clause\n */ var $b1e60e2d274fa48e$exports = {};\n$b1e60e2d274fa48e$exports = core;\n\n\nvar $d49bce06e58b8cea$var$playIcon = '<svg width=\"24\" height=\"24\" version=\"1.1\" viewBox=\"0 0 6.35 6.35\" xmlns=\"http://www.w3.org/2000/svg\">\\n <path d=\"m4.4979 3.175-2.1167 1.5875v-3.175z\" stroke-width=\".70201\"/>\\n</svg>\\n';\nvar $d49bce06e58b8cea$var$pauseIcon = '<svg width=\"24\" height=\"24\" version=\"1.1\" viewBox=\"0 0 6.35 6.35\" xmlns=\"http://www.w3.org/2000/svg\">\\n <path d=\"m1.8521 1.5875v3.175h0.92604v-3.175zm1.7198 0v3.175h0.92604v-3.175z\" stroke-width=\".24153\"/>\\n</svg>\\n';\nvar $d49bce06e58b8cea$var$errorIcon = '<svg width=\"24\" height=\"24\" version=\"1.1\" viewBox=\"0 0 6.35 6.35\" xmlns=\"http://www.w3.org/2000/svg\">\\n <path transform=\"scale(.26458)\" d=\"m12 3.5a8.4993 8.4993 0 0 0-8.5 8.5 8.4993 8.4993 0 0 0 8.5 8.5 8.4993 8.4993 0 0 0 8.5-8.5 8.4993 8.4993 0 0 0-8.5-8.5zm-1.4062 3.5h3v6h-3v-6zm0 8h3v2h-3v-2z\"/>\\n</svg>\\n';\nvar $d49bce06e58b8cea$var$controlsCSS = \":host {\\n  display: inline-block;\\n  width: 300px;\\n  margin: 3px;\\n  vertical-align: bottom;\\n  font-family: sans-serif;\\n  font-size: 14px;\\n}\\n\\n:focus:not(.focus-visible) {\\n  outline: none;\\n}\\n\\n.controls {\\n  width: inherit;\\n  height: inherit;\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-direction: row;\\n  position: relative;\\n  overflow: hidden;\\n  align-items: center;\\n  border-radius: 100px;\\n  background: #f2f5f6;\\n  padding: 0 0.25em;\\n  user-select: none;\\n}\\n.controls > * {\\n  margin: 0.8em 0.45em;\\n}\\n.controls input, .controls button {\\n  cursor: pointer;\\n}\\n.controls input:disabled, .controls button:disabled {\\n  cursor: inherit;\\n}\\n.controls button {\\n  text-align: center;\\n  background: rgba(204, 204, 204, 0);\\n  border: none;\\n  width: 32px;\\n  height: 32px;\\n  border-radius: 100%;\\n  transition: background-color 0.25s ease 0s;\\n  padding: 0;\\n}\\n.controls button:not(:disabled):hover {\\n  background: rgba(204, 204, 204, 0.3);\\n}\\n.controls button:not(:disabled):active {\\n  background: rgba(204, 204, 204, 0.6);\\n}\\n.controls button .icon {\\n  display: none;\\n}\\n.controls button .icon, .controls button .icon svg {\\n  vertical-align: middle;\\n}\\n.controls button .icon svg {\\n  fill: currentColor;\\n}\\n.controls .seek-bar {\\n  flex: 1;\\n  min-width: 0;\\n  margin-right: 1.1em;\\n  background: transparent;\\n}\\n.controls .seek-bar::-moz-range-track {\\n  background-color: #555;\\n}\\n.controls.stopped .play-icon, .controls.playing .stop-icon, .controls.error .error-icon {\\n  display: inherit;\\n}\\n.controls.frozen > div, .controls > button:disabled .icon {\\n  opacity: 0.5;\\n}\\n.controls .overlay {\\n  z-index: 0;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  margin: 0;\\n  box-sizing: border-box;\\n  display: none;\\n  opacity: 1;\\n}\\n.controls.loading .loading-overlay {\\n  display: block;\\n  background: linear-gradient(110deg, #92929200 5%, #92929288 25%, #92929200 45%);\\n  background-size: 250% 100%;\\n  background-repeat: repeat-y;\\n  animation: shimmer 1.5s linear infinite;\\n}\\n\\n@keyframes shimmer {\\n  0% {\\n    background-position: 125% 0;\\n  }\\n  100% {\\n    background-position: -200% 0;\\n  }\\n}\";\nvar $d49bce06e58b8cea$var$visualizerCSS = \":host {\\n  display: block;\\n}\\n\\n::slotted(.piano-roll-visualizer) {\\n  overflow-x: auto;\\n}\";\n/// <reference path=\"imports.d.ts\"/>\nconst $d49bce06e58b8cea$var$controlsTemplate = document.createElement(\"template\");\n$d49bce06e58b8cea$var$controlsTemplate.innerHTML = `\n<style>\n${$d49bce06e58b8cea$var$controlsCSS}\n</style>\n<div class=\"controls stopped frozen\" part=\"control-panel\">\n  <button class=\"play\" part=\"play-button\" disabled>\n    <span class=\"icon play-icon\">${$d49bce06e58b8cea$var$playIcon}</span>\n    <span class=\"icon stop-icon\">${$d49bce06e58b8cea$var$pauseIcon}</span>\n    <span class=\"icon error-icon\">${$d49bce06e58b8cea$var$errorIcon}</span>\n  </button>\n  <div part=\"time\"><span class=\"current-time\" part=\"current-time\">0:00</span> / <span class=\"total-time\" part=\"total-time\">0:00</span></div>\n  <input type=\"range\" min=\"0\" max=\"0\" value=\"0\" step=\"any\" class=\"seek-bar\" part=\"seek-bar\" disabled>\n  <div class=\"overlay loading-overlay\" part=\"loading-overlay\"></div>\n</div>\n`;\nconst $d49bce06e58b8cea$var$visualizerTemplate = document.createElement(\"template\");\n$d49bce06e58b8cea$var$visualizerTemplate.innerHTML = `\n<style>\n${$d49bce06e58b8cea$var$visualizerCSS}\n</style>\n<slot>\n</slot>\n`;\nfunction $d49bce06e58b8cea$var$formatTime(seconds) {\n    const negative = seconds < 0;\n    seconds = Math.floor(Math.abs(seconds || 0));\n    const s = seconds % 60;\n    const m = (seconds - s) / 60;\n    const h = (seconds - s - 60 * m) / 3600;\n    const sStr = s > 9 ? `${s}` : `0${s}`;\n    const mStr = m > 9 || !h ? `${m}:` : `0${m}:`;\n    const hStr = h ? `${h}:` : \"\";\n    return (negative ? \"-\" : \"\") + hStr + mStr + sStr;\n}\nconst $d49bce06e58b8cea$var$VISUALIZER_TYPES = [\n    \"piano-roll\",\n    \"waterfall\",\n    \"staff\"\n];\n/**\n * MIDI visualizer element.\n *\n * The visualizer is implemented via SVG elements which support styling as described\n * [here](https://magenta.github.io/magenta-js/music/demos/visualizer.html).\n *\n * See also the\n * [`@magenta/music/core/visualizer` docs](https://magenta.github.io/magenta-js/music/modules/_core_visualizer_.html).\n *\n * @prop src - MIDI file URL\n * @prop type - Visualizer type\n * @prop noteSequence - Magenta note sequence object representing the currently displayed content\n * @prop config - Magenta visualizer config object\n */ class $d49bce06e58b8cea$export$c1b498066a3693f0 extends HTMLElement {\n    constructor(){\n        super(...arguments);\n        this.domInitialized = false;\n        this.ns = null;\n        this._config = {};\n    }\n    static get observedAttributes() {\n        return [\n            \"src\",\n            \"type\"\n        ];\n    }\n    connectedCallback() {\n        this.attachShadow({\n            mode: \"open\"\n        });\n        this.shadowRoot.appendChild($d49bce06e58b8cea$var$visualizerTemplate.content.cloneNode(true));\n        if (this.domInitialized) return;\n        this.domInitialized = true;\n        this.wrapper = document.createElement(\"div\");\n        this.appendChild(this.wrapper);\n        this.initVisualizerNow();\n    }\n    attributeChangedCallback(name, _oldValue, _newValue) {\n        if (name === \"src\" || name === \"type\") this.initVisualizer();\n    }\n    initVisualizer() {\n        if (this.initTimeout == null) this.initTimeout = window.setTimeout(()=>this.initVisualizerNow());\n    }\n    async initVisualizerNow() {\n        this.initTimeout = null;\n        if (!this.domInitialized) return;\n        if (this.src) {\n            this.ns = null;\n            this.ns = await (0, $b1e60e2d274fa48e$exports.urlToNoteSequence)(this.src);\n        }\n        this.wrapper.innerHTML = \"\";\n        if (!this.ns) return;\n        if (this.type === \"piano-roll\") {\n            this.wrapper.classList.add(\"piano-roll-visualizer\");\n            const svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n            this.wrapper.appendChild(svg);\n            this.visualizer = new (0, $b1e60e2d274fa48e$exports.PianoRollSVGVisualizer)(this.ns, svg, this._config);\n        } else if (this.type === \"waterfall\") {\n            this.wrapper.classList.add(\"waterfall-visualizer\");\n            this.visualizer = new (0, $b1e60e2d274fa48e$exports.WaterfallSVGVisualizer)(this.ns, this.wrapper, this._config);\n        } else if (this.type === \"staff\") {\n            this.wrapper.classList.add(\"staff-visualizer\");\n            const div = document.createElement(\"div\");\n            this.wrapper.appendChild(div);\n            this.visualizer = new (0, $b1e60e2d274fa48e$exports.StaffSVGVisualizer)(this.ns, div, this._config);\n        }\n    }\n    reload() {\n        this.initVisualizerNow();\n    }\n    redraw(activeNote) {\n        if (this.visualizer) this.visualizer.redraw(activeNote, activeNote != null);\n    }\n    clearActiveNotes() {\n        if (this.visualizer) this.visualizer.clearActiveNotes();\n    }\n    get noteSequence() {\n        return this.ns;\n    }\n    set noteSequence(value) {\n        if (this.ns == value) return;\n        this.ns = value;\n        this.removeAttribute(\"src\"); // Triggers initVisualizer only if src was present.\n        this.initVisualizer();\n    }\n    get src() {\n        return this.getAttribute(\"src\");\n    }\n    set src(value) {\n        this.ns = null;\n        this.setOrRemoveAttribute(\"src\", value); // Triggers initVisualizer only if src was present.\n        this.initVisualizer();\n    }\n    get type() {\n        let value = this.getAttribute(\"type\");\n        if ($d49bce06e58b8cea$var$VISUALIZER_TYPES.indexOf(value) < 0) value = \"piano-roll\";\n        return value;\n    }\n    set type(value) {\n        if (value != null && $d49bce06e58b8cea$var$VISUALIZER_TYPES.indexOf(value) < 0) throw new Error(`Unknown visualizer type ${value}. Allowed values: ${$d49bce06e58b8cea$var$VISUALIZER_TYPES.join(\", \")}`);\n        this.setOrRemoveAttribute(\"type\", value);\n    }\n    get config() {\n        return this._config;\n    }\n    set config(value) {\n        this._config = value;\n        this.initVisualizer();\n    }\n    setOrRemoveAttribute(name, value) {\n        if (value == null) this.removeAttribute(name);\n        else this.setAttribute(name, value);\n    }\n}\nconst $d49bce06e58b8cea$var$VISUALIZER_EVENTS = [\n    \"start\",\n    \"stop\",\n    \"note\"\n];\nconst $d49bce06e58b8cea$var$DEFAULT_SOUNDFONT = \"https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus\";\nlet $d49bce06e58b8cea$var$playingPlayer = null;\n/**\n * MIDI player element.\n * See also the [`@magenta/music/core/player` docs](https://magenta.github.io/magenta-js/music/modules/_core_player_.html).\n *\n * The element supports styling using the CSS [`::part` syntax](https://developer.mozilla.org/docs/Web/CSS/::part)\n * (see the list of shadow parts [below](#css-shadow-parts)). For example:\n * ```css\n * midi-player::part(control-panel) {\n *     background: aquamarine;\n *     border-radius: 0px;\n * }\n * ```\n *\n * @prop src - MIDI file URL\n * @prop soundFont - Magenta SoundFont URL, an empty string to use the default SoundFont, or `null` to use a simple oscillator synth\n * @prop noteSequence - Magenta note sequence object representing the currently loaded content\n * @prop loop - Indicates whether the player should loop\n * @prop currentTime - Current playback position in seconds\n * @prop duration - Content duration in seconds\n * @prop playing - Indicates whether the player is currently playing\n * @attr visualizer - A selector matching `midi-visualizer` elements to bind to this player\n *\n * @fires load - The content is loaded and ready to play\n * @fires start - The player has started playing\n * @fires stop - The player has stopped playing\n * @fires loop - The player has automatically restarted playback after reaching the end\n * @fires note - A note starts\n *\n * @csspart control-panel - `<div>` containing all the controls\n * @csspart play-button - Play button\n * @csspart time - Numeric time indicator\n * @csspart current-time - Elapsed time\n * @csspart total-time - Total duration\n * @csspart seek-bar - `<input type=\"range\">` showing playback position\n * @csspart loading-overlay - Overlay with shimmer animation\n */ class $d49bce06e58b8cea$export$4d41b89800e2ee57 extends HTMLElement {\n    constructor(){\n        super();\n        this.domInitialized = false;\n        this.needInitNs = false;\n        this.visualizerListeners = new Map();\n        this.ns = null;\n        this._playing = false;\n        this.seeking = false;\n        this.attachShadow({\n            mode: \"open\"\n        });\n        this.shadowRoot.appendChild($d49bce06e58b8cea$var$controlsTemplate.content.cloneNode(true));\n        this.controlPanel = this.shadowRoot.querySelector(\".controls\");\n        this.playButton = this.controlPanel.querySelector(\".play\");\n        this.currentTimeLabel = this.controlPanel.querySelector(\".current-time\");\n        this.totalTimeLabel = this.controlPanel.querySelector(\".total-time\");\n        this.seekBar = this.controlPanel.querySelector(\".seek-bar\");\n    }\n    static get observedAttributes() {\n        return [\n            \"sound-font\",\n            \"src\",\n            \"visualizer\"\n        ];\n    }\n    connectedCallback() {\n        if (this.domInitialized) return;\n        this.domInitialized = true;\n        const applyFocusVisiblePolyfill = window.applyFocusVisiblePolyfill;\n        if (applyFocusVisiblePolyfill != null) applyFocusVisiblePolyfill(this.shadowRoot);\n        this.playButton.addEventListener(\"click\", ()=>{\n            if (this.player.isPlaying()) this.stop();\n            else this.start();\n        });\n        this.seekBar.addEventListener(\"input\", ()=>{\n            // Pause playback while the user is manipulating the control\n            this.seeking = true;\n            if (this.player && this.player.getPlayState() === \"started\") this.player.pause();\n        });\n        this.seekBar.addEventListener(\"change\", ()=>{\n            const time = this.currentTime; // This returns the seek bar value as a number\n            this.currentTimeLabel.textContent = $d49bce06e58b8cea$var$formatTime(time);\n            if (this.player) {\n                if (this.player.isPlaying()) {\n                    this.player.seekTo(time);\n                    if (this.player.getPlayState() === \"paused\") this.player.resume();\n                }\n            }\n            this.seeking = false;\n        });\n        this.initPlayerNow();\n    }\n    attributeChangedCallback(name, _oldValue, newValue) {\n        if (!this.hasAttribute(name)) newValue = null;\n        if (name === \"sound-font\" || name === \"src\") this.initPlayer();\n        else if (name === \"visualizer\") {\n            const fn = ()=>{\n                this.setVisualizerSelector(newValue);\n            };\n            if (document.readyState === \"loading\") window.addEventListener(\"DOMContentLoaded\", fn);\n            else fn();\n        }\n    }\n    initPlayer(initNs = true) {\n        this.needInitNs = this.needInitNs || initNs;\n        if (this.initTimeout == null) {\n            this.stop();\n            this.setLoading();\n            this.initTimeout = window.setTimeout(()=>this.initPlayerNow(this.needInitNs));\n        }\n    }\n    async initPlayerNow(initNs = true) {\n        this.initTimeout = null;\n        this.needInitNs = false;\n        if (!this.domInitialized) return;\n        try {\n            let ns = null;\n            if (initNs) {\n                if (this.src) {\n                    this.ns = null;\n                    this.ns = await (0, $b1e60e2d274fa48e$exports.urlToNoteSequence)(this.src);\n                }\n                this.currentTime = 0;\n                if (!this.ns) this.setError(\"No content loaded\");\n            }\n            ns = this.ns;\n            if (ns) {\n                this.seekBar.max = String(ns.totalTime);\n                this.totalTimeLabel.textContent = $d49bce06e58b8cea$var$formatTime(ns.totalTime);\n            } else {\n                this.seekBar.max = \"0\";\n                this.totalTimeLabel.textContent = $d49bce06e58b8cea$var$formatTime(0);\n                return;\n            }\n            let soundFont = this.soundFont;\n            const callbackObject = {\n                // Call callbacks only if we are still playing the same note sequence.\n                run: (n)=>this.ns === ns && this.noteCallback(n),\n                stop: ()=>{}\n            };\n            if (soundFont === null) this.player = new (0, $b1e60e2d274fa48e$exports.Player)(false, callbackObject);\n            else {\n                if (soundFont === \"\") soundFont = $d49bce06e58b8cea$var$DEFAULT_SOUNDFONT;\n                this.player = new (0, $b1e60e2d274fa48e$exports.SoundFontPlayer)(soundFont, undefined, undefined, undefined, callbackObject);\n                await this.player.loadSamples(ns);\n            }\n            if (this.ns !== ns) // If we started loading a different sequence in the meantime...\n            return;\n            this.setLoaded();\n            this.dispatchEvent(new CustomEvent(\"load\"));\n        } catch (error) {\n            this.setError(String(error));\n            throw error;\n        }\n    }\n    reload() {\n        this.initPlayerNow();\n    }\n    start() {\n        this._start();\n    }\n    _start(looped = false) {\n        (async ()=>{\n            if (this.player) {\n                if (this.player.getPlayState() == \"stopped\") {\n                    if ($d49bce06e58b8cea$var$playingPlayer && $d49bce06e58b8cea$var$playingPlayer.playing && !($d49bce06e58b8cea$var$playingPlayer == this && looped)) $d49bce06e58b8cea$var$playingPlayer.stop();\n                    $d49bce06e58b8cea$var$playingPlayer = this;\n                    this._playing = true;\n                    let offset = this.currentTime;\n                    // Jump to the start if there are no notes left to play.\n                    if (this.ns.notes.filter((note)=>note.startTime > offset).length == 0) offset = 0;\n                    this.currentTime = offset;\n                    this.controlPanel.classList.remove(\"stopped\");\n                    this.controlPanel.classList.add(\"playing\");\n                    try {\n                        // Force reload visualizers to prevent stuttering at playback start\n                        for (const visualizer of this.visualizerListeners.keys())if (visualizer.noteSequence != this.ns) {\n                            visualizer.noteSequence = this.ns;\n                            visualizer.reload();\n                        }\n                        const promise = this.player.start(this.ns, undefined, offset);\n                        if (!looped) this.dispatchEvent(new CustomEvent(\"start\"));\n                        else this.dispatchEvent(new CustomEvent(\"loop\"));\n                        await promise;\n                        this.handleStop(true);\n                    } catch (error) {\n                        this.handleStop();\n                        throw error;\n                    }\n                } else if (this.player.getPlayState() == \"paused\") // This normally should not happen, since we pause playback only when seeking.\n                this.player.resume();\n            }\n        })();\n    }\n    stop() {\n        if (this.player && this.player.isPlaying()) this.player.stop();\n        this.handleStop(false);\n    }\n    addVisualizer(visualizer) {\n        const listeners = {\n            start: ()=>{\n                visualizer.noteSequence = this.noteSequence;\n            },\n            stop: ()=>{\n                visualizer.clearActiveNotes();\n            },\n            note: (event)=>{\n                visualizer.redraw(event.detail.note);\n            }\n        };\n        for (const name of $d49bce06e58b8cea$var$VISUALIZER_EVENTS)this.addEventListener(name, listeners[name]);\n        this.visualizerListeners.set(visualizer, listeners);\n    }\n    removeVisualizer(visualizer) {\n        const listeners = this.visualizerListeners.get(visualizer);\n        for (const name of $d49bce06e58b8cea$var$VISUALIZER_EVENTS)this.removeEventListener(name, listeners[name]);\n        this.visualizerListeners.delete(visualizer);\n    }\n    noteCallback(note) {\n        if (!this.playing) return;\n        this.dispatchEvent(new CustomEvent(\"note\", {\n            detail: {\n                note: note\n            }\n        }));\n        if (this.seeking) return;\n        this.seekBar.value = String(note.startTime);\n        this.currentTimeLabel.textContent = $d49bce06e58b8cea$var$formatTime(note.startTime);\n    }\n    handleStop(finished = false) {\n        if (finished) {\n            if (this.loop) {\n                this.currentTime = 0;\n                this._start(true);\n                return;\n            }\n            this.currentTime = this.duration;\n        }\n        this.controlPanel.classList.remove(\"playing\");\n        this.controlPanel.classList.add(\"stopped\");\n        if (this._playing) {\n            this._playing = false;\n            this.dispatchEvent(new CustomEvent(\"stop\", {\n                detail: {\n                    finished: finished\n                }\n            }));\n        }\n    }\n    setVisualizerSelector(selector) {\n        // Remove old listeners\n        for (const listeners of this.visualizerListeners.values())for (const name of $d49bce06e58b8cea$var$VISUALIZER_EVENTS)this.removeEventListener(name, listeners[name]);\n        this.visualizerListeners.clear();\n        // Match visualizers and add them as listeners\n        if (selector != null) for (const element of document.querySelectorAll(selector)){\n            if (!(element instanceof $d49bce06e58b8cea$export$c1b498066a3693f0)) {\n                console.warn(`Selector ${selector} matched non-visualizer element`, element);\n                continue;\n            }\n            this.addVisualizer(element);\n        }\n    }\n    setLoading() {\n        this.playButton.disabled = true;\n        this.seekBar.disabled = true;\n        this.controlPanel.classList.remove(\"error\");\n        this.controlPanel.classList.add(\"loading\", \"frozen\");\n        this.controlPanel.removeAttribute(\"title\");\n    }\n    setLoaded() {\n        this.controlPanel.classList.remove(\"loading\", \"frozen\");\n        this.playButton.disabled = false;\n        this.seekBar.disabled = false;\n    }\n    setError(error) {\n        this.playButton.disabled = true;\n        this.seekBar.disabled = true;\n        this.controlPanel.classList.remove(\"loading\", \"stopped\", \"playing\");\n        this.controlPanel.classList.add(\"error\", \"frozen\");\n        this.controlPanel.title = error;\n    }\n    get noteSequence() {\n        return this.ns;\n    }\n    set noteSequence(value) {\n        if (this.ns == value) return;\n        this.ns = value;\n        this.removeAttribute(\"src\"); // Triggers initPlayer only if src was present.\n        this.initPlayer();\n    }\n    get src() {\n        return this.getAttribute(\"src\");\n    }\n    set src(value) {\n        this.ns = null;\n        this.setOrRemoveAttribute(\"src\", value); // Triggers initPlayer only if src was present.\n        this.initPlayer();\n    }\n    /**\n     * @attr sound-font\n     */ get soundFont() {\n        return this.getAttribute(\"sound-font\");\n    }\n    set soundFont(value) {\n        this.setOrRemoveAttribute(\"sound-font\", value);\n    }\n    /**\n     * @attr loop\n     */ get loop() {\n        return this.getAttribute(\"loop\") != null;\n    }\n    set loop(value) {\n        this.setOrRemoveAttribute(\"loop\", value ? \"\" : null);\n    }\n    get currentTime() {\n        return parseFloat(this.seekBar.value);\n    }\n    set currentTime(value) {\n        this.seekBar.value = String(value);\n        this.currentTimeLabel.textContent = $d49bce06e58b8cea$var$formatTime(this.currentTime);\n        if (this.player && this.player.isPlaying()) this.player.seekTo(value);\n    }\n    get duration() {\n        return parseFloat(this.seekBar.max);\n    }\n    get playing() {\n        return this._playing;\n    }\n    setOrRemoveAttribute(name, value) {\n        if (value == null) this.removeAttribute(name);\n        else this.setAttribute(name, value);\n    }\n}\nwindow.customElements.define(\"midi-player\", $d49bce06e58b8cea$export$4d41b89800e2ee57);\nwindow.customElements.define(\"midi-visualizer\", $d49bce06e58b8cea$export$c1b498066a3693f0);\n\n\n\nwindow.addEventListener(\"DOMContentLoaded\", ()=>{\n    const fileInput = document.getElementById(\"midiFile\");\n    if (fileInput) fileInput.addEventListener(\"change\", (e)=>{\n        (0, $b1e60e2d274fa48e$exports.blobToNoteSequence)(e.target.files[0]).then((seq)=>{\n            document.getElementById(\"mainPlayer\").noteSequence = seq;\n            document.getElementById(\"mainVisualizer\").noteSequence = seq;\n        }).catch((reason)=>{\n            alert(\"Failed to load MIDI file.\");\n            console.error(reason);\n        });\n    });\n});\ndocument.addEventListener(\"DOMContentLoaded\", (event)=>{\n    var moonIcon = document.getElementById(\"moonIcon\");\n    var sunIcon = document.getElementById(\"sunIcon\");\n    var isDarkMode = window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    // Set initial icon state\n    if (isDarkMode) {\n        moonIcon.style.display = \"none\";\n        sunIcon.style.display = \"inline-block\";\n    } else {\n        moonIcon.style.display = \"inline-block\";\n        sunIcon.style.display = \"none\";\n    }\n    document.getElementById(\"darkModeToggle\").addEventListener(\"click\", function() {\n        document.body.classList.toggle(\"dark-mode\");\n        document.body.classList.add(\"manual-dark-mode\");\n        if (document.body.classList.contains(\"dark-mode\")) {\n            moonIcon.style.display = \"none\";\n            sunIcon.style.display = \"inline-block\";\n        } else {\n            moonIcon.style.display = \"inline-block\";\n            sunIcon.style.display = \"none\";\n        }\n    });\n});\n\n})();\n//# sourceMappingURL=index.js.map\n","import 'focus-visible';\nimport 'html-midi-player';\nimport {blobToNoteSequence} from '@magenta/music';\n\nwindow.addEventListener('DOMContentLoaded', () => {\n    const fileInput = document.getElementById('midiFile');\n    if (fileInput) {\n        fileInput.addEventListener('change', (e) => {\n            blobToNoteSequence(e.target.files[0]).then((seq) => {\n                document.getElementById('mainPlayer').noteSequence = seq;\n                document.getElementById('mainVisualizer').noteSequence = seq;\n            }).catch((reason) => {\n                alert('Failed to load MIDI file.');\n                console.error(reason);\n            });\n        });\n    }\n});\n\ndocument.addEventListener('DOMContentLoaded', (event) => {\n  var moonIcon = document.getElementById('moonIcon');\n  var sunIcon = document.getElementById('sunIcon');\n  var isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n\n  // Set initial icon state\n  if (isDarkMode) {\n    moonIcon.style.display = 'none';\n    sunIcon.style.display = 'inline-block';\n  } else {\n    moonIcon.style.display = 'inline-block';\n    sunIcon.style.display = 'none';\n  }\n\n  document.getElementById('darkModeToggle').addEventListener('click', function() {\n    document.body.classList.toggle('dark-mode');\n    document.body.classList.add('manual-dark-mode');\n    if (document.body.classList.contains('dark-mode')) {\n      moonIcon.style.display = 'none';\n      sunIcon.style.display = 'inline-block';\n    } else {\n      moonIcon.style.display = 'inline-block';\n      sunIcon.style.display = 'none';\n    }\n  });\n});","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (factory());\n}(this, (function () { 'use strict';\n\n  /**\n   * Applies the :focus-visible polyfill at the given scope.\n   * A scope in this case is either the top-level Document or a Shadow Root.\n   *\n   * @param {(Document|ShadowRoot)} scope\n   * @see https://github.com/WICG/focus-visible\n   */\n  function applyFocusVisiblePolyfill(scope) {\n    var hadKeyboardEvent = true;\n    var hadFocusVisibleRecently = false;\n    var hadFocusVisibleRecentlyTimeout = null;\n\n    var inputTypesAllowlist = {\n      text: true,\n      search: true,\n      url: true,\n      tel: true,\n      email: true,\n      password: true,\n      number: true,\n      date: true,\n      month: true,\n      week: true,\n      time: true,\n      datetime: true,\n      'datetime-local': true\n    };\n\n    /**\n     * Helper function for legacy browsers and iframes which sometimes focus\n     * elements like document, body, and non-interactive SVG.\n     * @param {Element} el\n     */\n    function isValidFocusTarget(el) {\n      if (\n        el &&\n        el !== document &&\n        el.nodeName !== 'HTML' &&\n        el.nodeName !== 'BODY' &&\n        'classList' in el &&\n        'contains' in el.classList\n      ) {\n        return true;\n      }\n      return false;\n    }\n\n    /**\n     * Computes whether the given element should automatically trigger the\n     * `focus-visible` class being added, i.e. whether it should always match\n     * `:focus-visible` when focused.\n     * @param {Element} el\n     * @return {boolean}\n     */\n    function focusTriggersKeyboardModality(el) {\n      var type = el.type;\n      var tagName = el.tagName;\n\n      if (tagName === 'INPUT' && inputTypesAllowlist[type] && !el.readOnly) {\n        return true;\n      }\n\n      if (tagName === 'TEXTAREA' && !el.readOnly) {\n        return true;\n      }\n\n      if (el.isContentEditable) {\n        return true;\n      }\n\n      return false;\n    }\n\n    /**\n     * Add the `focus-visible` class to the given element if it was not added by\n     * the author.\n     * @param {Element} el\n     */\n    function addFocusVisibleClass(el) {\n      if (el.classList.contains('focus-visible')) {\n        return;\n      }\n      el.classList.add('focus-visible');\n      el.setAttribute('data-focus-visible-added', '');\n    }\n\n    /**\n     * Remove the `focus-visible` class from the given element if it was not\n     * originally added by the author.\n     * @param {Element} el\n     */\n    function removeFocusVisibleClass(el) {\n      if (!el.hasAttribute('data-focus-visible-added')) {\n        return;\n      }\n      el.classList.remove('focus-visible');\n      el.removeAttribute('data-focus-visible-added');\n    }\n\n    /**\n     * If the most recent user interaction was via the keyboard;\n     * and the key press did not include a meta, alt/option, or control key;\n     * then the modality is keyboard. Otherwise, the modality is not keyboard.\n     * Apply `focus-visible` to any current active element and keep track\n     * of our keyboard modality state with `hadKeyboardEvent`.\n     * @param {KeyboardEvent} e\n     */\n    function onKeyDown(e) {\n      if (e.metaKey || e.altKey || e.ctrlKey) {\n        return;\n      }\n\n      if (isValidFocusTarget(scope.activeElement)) {\n        addFocusVisibleClass(scope.activeElement);\n      }\n\n      hadKeyboardEvent = true;\n    }\n\n    /**\n     * If at any point a user clicks with a pointing device, ensure that we change\n     * the modality away from keyboard.\n     * This avoids the situation where a user presses a key on an already focused\n     * element, and then clicks on a different element, focusing it with a\n     * pointing device, while we still think we're in keyboard modality.\n     * @param {Event} e\n     */\n    function onPointerDown(e) {\n      hadKeyboardEvent = false;\n    }\n\n    /**\n     * On `focus`, add the `focus-visible` class to the target if:\n     * - the target received focus as a result of keyboard navigation, or\n     * - the event target is an element that will likely require interaction\n     *   via the keyboard (e.g. a text box)\n     * @param {Event} e\n     */\n    function onFocus(e) {\n      // Prevent IE from focusing the document or HTML element.\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (hadKeyboardEvent || focusTriggersKeyboardModality(e.target)) {\n        addFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * On `blur`, remove the `focus-visible` class from the target.\n     * @param {Event} e\n     */\n    function onBlur(e) {\n      if (!isValidFocusTarget(e.target)) {\n        return;\n      }\n\n      if (\n        e.target.classList.contains('focus-visible') ||\n        e.target.hasAttribute('data-focus-visible-added')\n      ) {\n        // To detect a tab/window switch, we look for a blur event followed\n        // rapidly by a visibility change.\n        // If we don't see a visibility change within 100ms, it's probably a\n        // regular focus change.\n        hadFocusVisibleRecently = true;\n        window.clearTimeout(hadFocusVisibleRecentlyTimeout);\n        hadFocusVisibleRecentlyTimeout = window.setTimeout(function() {\n          hadFocusVisibleRecently = false;\n        }, 100);\n        removeFocusVisibleClass(e.target);\n      }\n    }\n\n    /**\n     * If the user changes tabs, keep track of whether or not the previously\n     * focused element had .focus-visible.\n     * @param {Event} e\n     */\n    function onVisibilityChange(e) {\n      if (document.visibilityState === 'hidden') {\n        // If the tab becomes active again, the browser will handle calling focus\n        // on the element (Safari actually calls it twice).\n        // If this tab change caused a blur on an element with focus-visible,\n        // re-apply the class when the user switches back to the tab.\n        if (hadFocusVisibleRecently) {\n          hadKeyboardEvent = true;\n        }\n        addInitialPointerMoveListeners();\n      }\n    }\n\n    /**\n     * Add a group of listeners to detect usage of any pointing devices.\n     * These listeners will be added when the polyfill first loads, and anytime\n     * the window is blurred, so that they are active when the window regains\n     * focus.\n     */\n    function addInitialPointerMoveListeners() {\n      document.addEventListener('mousemove', onInitialPointerMove);\n      document.addEventListener('mousedown', onInitialPointerMove);\n      document.addEventListener('mouseup', onInitialPointerMove);\n      document.addEventListener('pointermove', onInitialPointerMove);\n      document.addEventListener('pointerdown', onInitialPointerMove);\n      document.addEventListener('pointerup', onInitialPointerMove);\n      document.addEventListener('touchmove', onInitialPointerMove);\n      document.addEventListener('touchstart', onInitialPointerMove);\n      document.addEventListener('touchend', onInitialPointerMove);\n    }\n\n    function removeInitialPointerMoveListeners() {\n      document.removeEventListener('mousemove', onInitialPointerMove);\n      document.removeEventListener('mousedown', onInitialPointerMove);\n      document.removeEventListener('mouseup', onInitialPointerMove);\n      document.removeEventListener('pointermove', onInitialPointerMove);\n      document.removeEventListener('pointerdown', onInitialPointerMove);\n      document.removeEventListener('pointerup', onInitialPointerMove);\n      document.removeEventListener('touchmove', onInitialPointerMove);\n      document.removeEventListener('touchstart', onInitialPointerMove);\n      document.removeEventListener('touchend', onInitialPointerMove);\n    }\n\n    /**\n     * When the polfyill first loads, assume the user is in keyboard modality.\n     * If any event is received from a pointing device (e.g. mouse, pointer,\n     * touch), turn off keyboard modality.\n     * This accounts for situations where focus enters the page from the URL bar.\n     * @param {Event} e\n     */\n    function onInitialPointerMove(e) {\n      // Work around a Safari quirk that fires a mousemove on <html> whenever the\n      // window blurs, even if you're tabbing out of the page. ¯\\_(ツ)_/¯\n      if (e.target.nodeName && e.target.nodeName.toLowerCase() === 'html') {\n        return;\n      }\n\n      hadKeyboardEvent = false;\n      removeInitialPointerMoveListeners();\n    }\n\n    // For some kinds of state, we are interested in changes at the global scope\n    // only. For example, global pointer input, global key presses and global\n    // visibility change should affect the state at every scope:\n    document.addEventListener('keydown', onKeyDown, true);\n    document.addEventListener('mousedown', onPointerDown, true);\n    document.addEventListener('pointerdown', onPointerDown, true);\n    document.addEventListener('touchstart', onPointerDown, true);\n    document.addEventListener('visibilitychange', onVisibilityChange, true);\n\n    addInitialPointerMoveListeners();\n\n    // For focus and blur, we specifically care about state changes in the local\n    // scope. This is because focus / blur events that originate from within a\n    // shadow root are not re-dispatched from the host element if it was already\n    // the active element in its own scope:\n    scope.addEventListener('focus', onFocus, true);\n    scope.addEventListener('blur', onBlur, true);\n\n    // We detect that a node is a ShadowRoot by ensuring that it is a\n    // DocumentFragment and also has a host property. This check covers native\n    // implementation and polyfill implementation transparently. If we only cared\n    // about the native implementation, we could just check if the scope was\n    // an instance of a ShadowRoot.\n    if (scope.nodeType === Node.DOCUMENT_FRAGMENT_NODE && scope.host) {\n      // Since a ShadowRoot is a special kind of DocumentFragment, it does not\n      // have a root element to add a class to. So, we add this attribute to the\n      // host element instead:\n      scope.host.setAttribute('data-js-focus-visible', '');\n    } else if (scope.nodeType === Node.DOCUMENT_NODE) {\n      document.documentElement.classList.add('js-focus-visible');\n      document.documentElement.setAttribute('data-js-focus-visible', '');\n    }\n  }\n\n  // It is important to wrap all references to global window and document in\n  // these checks to support server-side rendering use cases\n  // @see https://github.com/WICG/focus-visible/issues/199\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    // Make the polyfill helper globally available. This can be used as a signal\n    // to interested libraries that wish to coordinate with the polyfill for e.g.,\n    // applying the polyfill to a shadow root:\n    window.applyFocusVisiblePolyfill = applyFocusVisiblePolyfill;\n\n    // Notify interested libraries of the polyfill's presence, in case the\n    // polyfill was loaded lazily:\n    var event;\n\n    try {\n      event = new CustomEvent('focus-visible-polyfill-ready');\n    } catch (error) {\n      // IE11 does not support using CustomEvent as a constructor directly:\n      event = document.createEvent('CustomEvent');\n      event.initCustomEvent('focus-visible-polyfill-ready', false, false, {});\n    }\n\n    window.dispatchEvent(event);\n  }\n\n  if (typeof document !== 'undefined') {\n    // Apply the polyfill to the global document, so that no JavaScript\n    // coordination is required to use the polyfill in the top-level document:\n    applyFocusVisiblePolyfill(document);\n  }\n\n})));\n","/**\n * html-midi-player@1.5.0\n * https://github.com/cifkao/html-midi-player.git\n * @author Ondřej Cífka (@cifkao)\n * @license BSD-2-Clause\n */\n\nimport { urlToNoteSequence, PianoRollSVGVisualizer, WaterfallSVGVisualizer, StaffSVGVisualizer, Player, SoundFontPlayer } from '@magenta/music/esm/core.js';\n\nvar playIcon = \"<svg width=\\\"24\\\" height=\\\"24\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 6.35 6.35\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path d=\\\"m4.4979 3.175-2.1167 1.5875v-3.175z\\\" stroke-width=\\\".70201\\\"/>\\n</svg>\\n\";\n\nvar pauseIcon = \"<svg width=\\\"24\\\" height=\\\"24\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 6.35 6.35\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path d=\\\"m1.8521 1.5875v3.175h0.92604v-3.175zm1.7198 0v3.175h0.92604v-3.175z\\\" stroke-width=\\\".24153\\\"/>\\n</svg>\\n\";\n\nvar errorIcon = \"<svg width=\\\"24\\\" height=\\\"24\\\" version=\\\"1.1\\\" viewBox=\\\"0 0 6.35 6.35\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\">\\n <path transform=\\\"scale(.26458)\\\" d=\\\"m12 3.5a8.4993 8.4993 0 0 0-8.5 8.5 8.4993 8.4993 0 0 0 8.5 8.5 8.4993 8.4993 0 0 0 8.5-8.5 8.4993 8.4993 0 0 0-8.5-8.5zm-1.4062 3.5h3v6h-3v-6zm0 8h3v2h-3v-2z\\\"/>\\n</svg>\\n\";\n\nvar controlsCSS = \":host {\\n  display: inline-block;\\n  width: 300px;\\n  margin: 3px;\\n  vertical-align: bottom;\\n  font-family: sans-serif;\\n  font-size: 14px;\\n}\\n\\n:focus:not(.focus-visible) {\\n  outline: none;\\n}\\n\\n.controls {\\n  width: inherit;\\n  height: inherit;\\n  box-sizing: border-box;\\n  display: flex;\\n  flex-direction: row;\\n  position: relative;\\n  overflow: hidden;\\n  align-items: center;\\n  border-radius: 100px;\\n  background: #f2f5f6;\\n  padding: 0 0.25em;\\n  user-select: none;\\n}\\n.controls > * {\\n  margin: 0.8em 0.45em;\\n}\\n.controls input, .controls button {\\n  cursor: pointer;\\n}\\n.controls input:disabled, .controls button:disabled {\\n  cursor: inherit;\\n}\\n.controls button {\\n  text-align: center;\\n  background: rgba(204, 204, 204, 0);\\n  border: none;\\n  width: 32px;\\n  height: 32px;\\n  border-radius: 100%;\\n  transition: background-color 0.25s ease 0s;\\n  padding: 0;\\n}\\n.controls button:not(:disabled):hover {\\n  background: rgba(204, 204, 204, 0.3);\\n}\\n.controls button:not(:disabled):active {\\n  background: rgba(204, 204, 204, 0.6);\\n}\\n.controls button .icon {\\n  display: none;\\n}\\n.controls button .icon, .controls button .icon svg {\\n  vertical-align: middle;\\n}\\n.controls button .icon svg {\\n  fill: currentColor;\\n}\\n.controls .seek-bar {\\n  flex: 1;\\n  min-width: 0;\\n  margin-right: 1.1em;\\n  background: transparent;\\n}\\n.controls .seek-bar::-moz-range-track {\\n  background-color: #555;\\n}\\n.controls.stopped .play-icon, .controls.playing .stop-icon, .controls.error .error-icon {\\n  display: inherit;\\n}\\n.controls.frozen > div, .controls > button:disabled .icon {\\n  opacity: 0.5;\\n}\\n.controls .overlay {\\n  z-index: 0;\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n  margin: 0;\\n  box-sizing: border-box;\\n  display: none;\\n  opacity: 1;\\n}\\n.controls.loading .loading-overlay {\\n  display: block;\\n  background: linear-gradient(110deg, #92929200 5%, #92929288 25%, #92929200 45%);\\n  background-size: 250% 100%;\\n  background-repeat: repeat-y;\\n  animation: shimmer 1.5s linear infinite;\\n}\\n\\n@keyframes shimmer {\\n  0% {\\n    background-position: 125% 0;\\n  }\\n  100% {\\n    background-position: -200% 0;\\n  }\\n}\";\n\nvar visualizerCSS = \":host {\\n  display: block;\\n}\\n\\n::slotted(.piano-roll-visualizer) {\\n  overflow-x: auto;\\n}\";\n\n/// <reference path=\"imports.d.ts\"/>\nconst controlsTemplate = document.createElement('template');\ncontrolsTemplate.innerHTML = `\n<style>\n${controlsCSS}\n</style>\n<div class=\"controls stopped frozen\" part=\"control-panel\">\n  <button class=\"play\" part=\"play-button\" disabled>\n    <span class=\"icon play-icon\">${playIcon}</span>\n    <span class=\"icon stop-icon\">${pauseIcon}</span>\n    <span class=\"icon error-icon\">${errorIcon}</span>\n  </button>\n  <div part=\"time\"><span class=\"current-time\" part=\"current-time\">0:00</span> / <span class=\"total-time\" part=\"total-time\">0:00</span></div>\n  <input type=\"range\" min=\"0\" max=\"0\" value=\"0\" step=\"any\" class=\"seek-bar\" part=\"seek-bar\" disabled>\n  <div class=\"overlay loading-overlay\" part=\"loading-overlay\"></div>\n</div>\n`;\nconst visualizerTemplate = document.createElement('template');\nvisualizerTemplate.innerHTML = `\n<style>\n${visualizerCSS}\n</style>\n<slot>\n</slot>\n`;\n\nfunction formatTime(seconds) {\n    const negative = (seconds < 0);\n    seconds = Math.floor(Math.abs(seconds || 0));\n    const s = seconds % 60;\n    const m = (seconds - s) / 60;\n    const h = (seconds - s - 60 * m) / 3600;\n    const sStr = (s > 9) ? `${s}` : `0${s}`;\n    const mStr = (m > 9 || !h) ? `${m}:` : `0${m}:`;\n    const hStr = h ? `${h}:` : '';\n    return (negative ? '-' : '') + hStr + mStr + sStr;\n}\n\nconst VISUALIZER_TYPES = ['piano-roll', 'waterfall', 'staff'];\n/**\n * MIDI visualizer element.\n *\n * The visualizer is implemented via SVG elements which support styling as described\n * [here](https://magenta.github.io/magenta-js/music/demos/visualizer.html).\n *\n * See also the\n * [`@magenta/music/core/visualizer` docs](https://magenta.github.io/magenta-js/music/modules/_core_visualizer_.html).\n *\n * @prop src - MIDI file URL\n * @prop type - Visualizer type\n * @prop noteSequence - Magenta note sequence object representing the currently displayed content\n * @prop config - Magenta visualizer config object\n */\nclass VisualizerElement extends HTMLElement {\n    constructor() {\n        super(...arguments);\n        this.domInitialized = false;\n        this.ns = null;\n        this._config = {};\n    }\n    static get observedAttributes() { return ['src', 'type']; }\n    connectedCallback() {\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(visualizerTemplate.content.cloneNode(true));\n        if (this.domInitialized) {\n            return;\n        }\n        this.domInitialized = true;\n        this.wrapper = document.createElement('div');\n        this.appendChild(this.wrapper);\n        this.initVisualizerNow();\n    }\n    attributeChangedCallback(name, _oldValue, _newValue) {\n        if (name === 'src' || name === 'type') {\n            this.initVisualizer();\n        }\n    }\n    initVisualizer() {\n        if (this.initTimeout == null) {\n            this.initTimeout = window.setTimeout(() => this.initVisualizerNow());\n        }\n    }\n    async initVisualizerNow() {\n        this.initTimeout = null;\n        if (!this.domInitialized) {\n            return;\n        }\n        if (this.src) {\n            this.ns = null;\n            this.ns = await urlToNoteSequence(this.src);\n        }\n        this.wrapper.innerHTML = '';\n        if (!this.ns) {\n            return;\n        }\n        if (this.type === 'piano-roll') {\n            this.wrapper.classList.add('piano-roll-visualizer');\n            const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n            this.wrapper.appendChild(svg);\n            this.visualizer = new PianoRollSVGVisualizer(this.ns, svg, this._config);\n        }\n        else if (this.type === 'waterfall') {\n            this.wrapper.classList.add('waterfall-visualizer');\n            this.visualizer = new WaterfallSVGVisualizer(this.ns, this.wrapper, this._config);\n        }\n        else if (this.type === 'staff') {\n            this.wrapper.classList.add('staff-visualizer');\n            const div = document.createElement('div');\n            this.wrapper.appendChild(div);\n            this.visualizer = new StaffSVGVisualizer(this.ns, div, this._config);\n        }\n    }\n    reload() {\n        this.initVisualizerNow();\n    }\n    redraw(activeNote) {\n        if (this.visualizer) {\n            this.visualizer.redraw(activeNote, activeNote != null);\n        }\n    }\n    clearActiveNotes() {\n        if (this.visualizer) {\n            this.visualizer.clearActiveNotes();\n        }\n    }\n    get noteSequence() {\n        return this.ns;\n    }\n    set noteSequence(value) {\n        if (this.ns == value) {\n            return;\n        }\n        this.ns = value;\n        this.removeAttribute('src'); // Triggers initVisualizer only if src was present.\n        this.initVisualizer();\n    }\n    get src() {\n        return this.getAttribute('src');\n    }\n    set src(value) {\n        this.ns = null;\n        this.setOrRemoveAttribute('src', value); // Triggers initVisualizer only if src was present.\n        this.initVisualizer();\n    }\n    get type() {\n        let value = this.getAttribute('type');\n        if (VISUALIZER_TYPES.indexOf(value) < 0) {\n            value = 'piano-roll';\n        }\n        return value;\n    }\n    set type(value) {\n        if (value != null && VISUALIZER_TYPES.indexOf(value) < 0) {\n            throw new Error(`Unknown visualizer type ${value}. Allowed values: ${VISUALIZER_TYPES.join(', ')}`);\n        }\n        this.setOrRemoveAttribute('type', value);\n    }\n    get config() {\n        return this._config;\n    }\n    set config(value) {\n        this._config = value;\n        this.initVisualizer();\n    }\n    setOrRemoveAttribute(name, value) {\n        if (value == null) {\n            this.removeAttribute(name);\n        }\n        else {\n            this.setAttribute(name, value);\n        }\n    }\n}\n\nconst VISUALIZER_EVENTS = ['start', 'stop', 'note'];\nconst DEFAULT_SOUNDFONT = 'https://storage.googleapis.com/magentadata/js/soundfonts/sgm_plus';\nlet playingPlayer = null;\n/**\n * MIDI player element.\n * See also the [`@magenta/music/core/player` docs](https://magenta.github.io/magenta-js/music/modules/_core_player_.html).\n *\n * The element supports styling using the CSS [`::part` syntax](https://developer.mozilla.org/docs/Web/CSS/::part)\n * (see the list of shadow parts [below](#css-shadow-parts)). For example:\n * ```css\n * midi-player::part(control-panel) {\n *     background: aquamarine;\n *     border-radius: 0px;\n * }\n * ```\n *\n * @prop src - MIDI file URL\n * @prop soundFont - Magenta SoundFont URL, an empty string to use the default SoundFont, or `null` to use a simple oscillator synth\n * @prop noteSequence - Magenta note sequence object representing the currently loaded content\n * @prop loop - Indicates whether the player should loop\n * @prop currentTime - Current playback position in seconds\n * @prop duration - Content duration in seconds\n * @prop playing - Indicates whether the player is currently playing\n * @attr visualizer - A selector matching `midi-visualizer` elements to bind to this player\n *\n * @fires load - The content is loaded and ready to play\n * @fires start - The player has started playing\n * @fires stop - The player has stopped playing\n * @fires loop - The player has automatically restarted playback after reaching the end\n * @fires note - A note starts\n *\n * @csspart control-panel - `<div>` containing all the controls\n * @csspart play-button - Play button\n * @csspart time - Numeric time indicator\n * @csspart current-time - Elapsed time\n * @csspart total-time - Total duration\n * @csspart seek-bar - `<input type=\"range\">` showing playback position\n * @csspart loading-overlay - Overlay with shimmer animation\n */\nclass PlayerElement extends HTMLElement {\n    constructor() {\n        super();\n        this.domInitialized = false;\n        this.needInitNs = false;\n        this.visualizerListeners = new Map();\n        this.ns = null;\n        this._playing = false;\n        this.seeking = false;\n        this.attachShadow({ mode: 'open' });\n        this.shadowRoot.appendChild(controlsTemplate.content.cloneNode(true));\n        this.controlPanel = this.shadowRoot.querySelector('.controls');\n        this.playButton = this.controlPanel.querySelector('.play');\n        this.currentTimeLabel = this.controlPanel.querySelector('.current-time');\n        this.totalTimeLabel = this.controlPanel.querySelector('.total-time');\n        this.seekBar = this.controlPanel.querySelector('.seek-bar');\n    }\n    static get observedAttributes() { return ['sound-font', 'src', 'visualizer']; }\n    connectedCallback() {\n        if (this.domInitialized) {\n            return;\n        }\n        this.domInitialized = true;\n        const applyFocusVisiblePolyfill = window.applyFocusVisiblePolyfill;\n        if (applyFocusVisiblePolyfill != null) {\n            applyFocusVisiblePolyfill(this.shadowRoot);\n        }\n        this.playButton.addEventListener('click', () => {\n            if (this.player.isPlaying()) {\n                this.stop();\n            }\n            else {\n                this.start();\n            }\n        });\n        this.seekBar.addEventListener('input', () => {\n            // Pause playback while the user is manipulating the control\n            this.seeking = true;\n            if (this.player && this.player.getPlayState() === 'started') {\n                this.player.pause();\n            }\n        });\n        this.seekBar.addEventListener('change', () => {\n            const time = this.currentTime; // This returns the seek bar value as a number\n            this.currentTimeLabel.textContent = formatTime(time);\n            if (this.player) {\n                if (this.player.isPlaying()) {\n                    this.player.seekTo(time);\n                    if (this.player.getPlayState() === 'paused') {\n                        this.player.resume();\n                    }\n                }\n            }\n            this.seeking = false;\n        });\n        this.initPlayerNow();\n    }\n    attributeChangedCallback(name, _oldValue, newValue) {\n        if (!this.hasAttribute(name)) {\n            newValue = null;\n        }\n        if (name === 'sound-font' || name === 'src') {\n            this.initPlayer();\n        }\n        else if (name === 'visualizer') {\n            const fn = () => { this.setVisualizerSelector(newValue); };\n            if (document.readyState === 'loading') {\n                window.addEventListener('DOMContentLoaded', fn);\n            }\n            else {\n                fn();\n            }\n        }\n    }\n    initPlayer(initNs = true) {\n        this.needInitNs = this.needInitNs || initNs;\n        if (this.initTimeout == null) {\n            this.stop();\n            this.setLoading();\n            this.initTimeout = window.setTimeout(() => this.initPlayerNow(this.needInitNs));\n        }\n    }\n    async initPlayerNow(initNs = true) {\n        this.initTimeout = null;\n        this.needInitNs = false;\n        if (!this.domInitialized) {\n            return;\n        }\n        try {\n            let ns = null;\n            if (initNs) {\n                if (this.src) {\n                    this.ns = null;\n                    this.ns = await urlToNoteSequence(this.src);\n                }\n                this.currentTime = 0;\n                if (!this.ns) {\n                    this.setError('No content loaded');\n                }\n            }\n            ns = this.ns;\n            if (ns) {\n                this.seekBar.max = String(ns.totalTime);\n                this.totalTimeLabel.textContent = formatTime(ns.totalTime);\n            }\n            else {\n                this.seekBar.max = '0';\n                this.totalTimeLabel.textContent = formatTime(0);\n                return;\n            }\n            let soundFont = this.soundFont;\n            const callbackObject = {\n                // Call callbacks only if we are still playing the same note sequence.\n                run: (n) => (this.ns === ns) && this.noteCallback(n),\n                stop: () => { }\n            };\n            if (soundFont === null) {\n                this.player = new Player(false, callbackObject);\n            }\n            else {\n                if (soundFont === \"\") {\n                    soundFont = DEFAULT_SOUNDFONT;\n                }\n                this.player = new SoundFontPlayer(soundFont, undefined, undefined, undefined, callbackObject);\n                await this.player.loadSamples(ns);\n            }\n            if (this.ns !== ns) {\n                // If we started loading a different sequence in the meantime...\n                return;\n            }\n            this.setLoaded();\n            this.dispatchEvent(new CustomEvent('load'));\n        }\n        catch (error) {\n            this.setError(String(error));\n            throw error;\n        }\n    }\n    reload() {\n        this.initPlayerNow();\n    }\n    start() {\n        this._start();\n    }\n    _start(looped = false) {\n        (async () => {\n            if (this.player) {\n                if (this.player.getPlayState() == 'stopped') {\n                    if (playingPlayer && playingPlayer.playing && !(playingPlayer == this && looped)) {\n                        playingPlayer.stop();\n                    }\n                    playingPlayer = this;\n                    this._playing = true;\n                    let offset = this.currentTime;\n                    // Jump to the start if there are no notes left to play.\n                    if (this.ns.notes.filter((note) => note.startTime > offset).length == 0) {\n                        offset = 0;\n                    }\n                    this.currentTime = offset;\n                    this.controlPanel.classList.remove('stopped');\n                    this.controlPanel.classList.add('playing');\n                    try {\n                        // Force reload visualizers to prevent stuttering at playback start\n                        for (const visualizer of this.visualizerListeners.keys()) {\n                            if (visualizer.noteSequence != this.ns) {\n                                visualizer.noteSequence = this.ns;\n                                visualizer.reload();\n                            }\n                        }\n                        const promise = this.player.start(this.ns, undefined, offset);\n                        if (!looped) {\n                            this.dispatchEvent(new CustomEvent('start'));\n                        }\n                        else {\n                            this.dispatchEvent(new CustomEvent('loop'));\n                        }\n                        await promise;\n                        this.handleStop(true);\n                    }\n                    catch (error) {\n                        this.handleStop();\n                        throw error;\n                    }\n                }\n                else if (this.player.getPlayState() == 'paused') {\n                    // This normally should not happen, since we pause playback only when seeking.\n                    this.player.resume();\n                }\n            }\n        })();\n    }\n    stop() {\n        if (this.player && this.player.isPlaying()) {\n            this.player.stop();\n        }\n        this.handleStop(false);\n    }\n    addVisualizer(visualizer) {\n        const listeners = {\n            start: () => { visualizer.noteSequence = this.noteSequence; },\n            stop: () => { visualizer.clearActiveNotes(); },\n            note: (event) => { visualizer.redraw(event.detail.note); },\n        };\n        for (const name of VISUALIZER_EVENTS) {\n            this.addEventListener(name, listeners[name]);\n        }\n        this.visualizerListeners.set(visualizer, listeners);\n    }\n    removeVisualizer(visualizer) {\n        const listeners = this.visualizerListeners.get(visualizer);\n        for (const name of VISUALIZER_EVENTS) {\n            this.removeEventListener(name, listeners[name]);\n        }\n        this.visualizerListeners.delete(visualizer);\n    }\n    noteCallback(note) {\n        if (!this.playing) {\n            return;\n        }\n        this.dispatchEvent(new CustomEvent('note', { detail: { note } }));\n        if (this.seeking) {\n            return;\n        }\n        this.seekBar.value = String(note.startTime);\n        this.currentTimeLabel.textContent = formatTime(note.startTime);\n    }\n    handleStop(finished = false) {\n        if (finished) {\n            if (this.loop) {\n                this.currentTime = 0;\n                this._start(true);\n                return;\n            }\n            this.currentTime = this.duration;\n        }\n        this.controlPanel.classList.remove('playing');\n        this.controlPanel.classList.add('stopped');\n        if (this._playing) {\n            this._playing = false;\n            this.dispatchEvent(new CustomEvent('stop', { detail: { finished } }));\n        }\n    }\n    setVisualizerSelector(selector) {\n        // Remove old listeners\n        for (const listeners of this.visualizerListeners.values()) {\n            for (const name of VISUALIZER_EVENTS) {\n                this.removeEventListener(name, listeners[name]);\n            }\n        }\n        this.visualizerListeners.clear();\n        // Match visualizers and add them as listeners\n        if (selector != null) {\n            for (const element of document.querySelectorAll(selector)) {\n                if (!(element instanceof VisualizerElement)) {\n                    console.warn(`Selector ${selector} matched non-visualizer element`, element);\n                    continue;\n                }\n                this.addVisualizer(element);\n            }\n        }\n    }\n    setLoading() {\n        this.playButton.disabled = true;\n        this.seekBar.disabled = true;\n        this.controlPanel.classList.remove('error');\n        this.controlPanel.classList.add('loading', 'frozen');\n        this.controlPanel.removeAttribute('title');\n    }\n    setLoaded() {\n        this.controlPanel.classList.remove('loading', 'frozen');\n        this.playButton.disabled = false;\n        this.seekBar.disabled = false;\n    }\n    setError(error) {\n        this.playButton.disabled = true;\n        this.seekBar.disabled = true;\n        this.controlPanel.classList.remove('loading', 'stopped', 'playing');\n        this.controlPanel.classList.add('error', 'frozen');\n        this.controlPanel.title = error;\n    }\n    get noteSequence() {\n        return this.ns;\n    }\n    set noteSequence(value) {\n        if (this.ns == value) {\n            return;\n        }\n        this.ns = value;\n        this.removeAttribute('src'); // Triggers initPlayer only if src was present.\n        this.initPlayer();\n    }\n    get src() {\n        return this.getAttribute('src');\n    }\n    set src(value) {\n        this.ns = null;\n        this.setOrRemoveAttribute('src', value); // Triggers initPlayer only if src was present.\n        this.initPlayer();\n    }\n    /**\n     * @attr sound-font\n     */\n    get soundFont() {\n        return this.getAttribute('sound-font');\n    }\n    set soundFont(value) {\n        this.setOrRemoveAttribute('sound-font', value);\n    }\n    /**\n     * @attr loop\n     */\n    get loop() {\n        return this.getAttribute('loop') != null;\n    }\n    set loop(value) {\n        this.setOrRemoveAttribute('loop', value ? '' : null);\n    }\n    get currentTime() {\n        return parseFloat(this.seekBar.value);\n    }\n    set currentTime(value) {\n        this.seekBar.value = String(value);\n        this.currentTimeLabel.textContent = formatTime(this.currentTime);\n        if (this.player && this.player.isPlaying()) {\n            this.player.seekTo(value);\n        }\n    }\n    get duration() {\n        return parseFloat(this.seekBar.max);\n    }\n    get playing() {\n        return this._playing;\n    }\n    setOrRemoveAttribute(name, value) {\n        if (value == null) {\n            this.removeAttribute(name);\n        }\n        else {\n            this.setAttribute(name, value);\n        }\n    }\n}\n\nwindow.customElements.define('midi-player', PlayerElement);\nwindow.customElements.define('midi-visualizer', VisualizerElement);\n\nexport { PlayerElement, VisualizerElement };\n","module.exports=core;"],"names":["factory","applyFocusVisiblePolyfill","scope","hadKeyboardEvent","hadFocusVisibleRecently","hadFocusVisibleRecentlyTimeout","inputTypesAllowlist","text","search","url","tel","email","password","number","date","month","week","time","datetime","isValidFocusTarget","el","document","nodeName","classList","addFocusVisibleClass","contains","add","setAttribute","onPointerDown","e","addInitialPointerMoveListeners","addEventListener","onInitialPointerMove","target","toLowerCase","removeEventListener","metaKey","altKey","ctrlKey","activeElement","visibilityState","type","tagName","readOnly","isContentEditable","hasAttribute","window","clearTimeout","setTimeout","remove","removeAttribute","nodeType","Node","DOCUMENT_FRAGMENT_NODE","host","DOCUMENT_NODE","documentElement","event","CustomEvent","error","createEvent","initCustomEvent","dispatchEvent","$b1e60e2d274fa48e$exports","core","$d49bce06e58b8cea$var$controlsTemplate","createElement","innerHTML","$d49bce06e58b8cea$var$visualizerTemplate","$d49bce06e58b8cea$var$formatTime","seconds","negative","s","Math","floor","abs","m","h","mStr","$d49bce06e58b8cea$var$VISUALIZER_TYPES","$d49bce06e58b8cea$export$c1b498066a3693f0","HTMLElement","constructor","arguments","domInitialized","ns","_config","observedAttributes","connectedCallback","attachShadow","mode","shadowRoot","appendChild","content","cloneNode","wrapper","initVisualizerNow","attributeChangedCallback","name","_oldValue","_newValue","initVisualizer","initTimeout","src","urlToNoteSequence","svg","createElementNS","visualizer","PianoRollSVGVisualizer","WaterfallSVGVisualizer","div","StaffSVGVisualizer","reload","redraw","activeNote","clearActiveNotes","noteSequence","value","getAttribute","setOrRemoveAttribute","indexOf","Error","join","config","$d49bce06e58b8cea$var$VISUALIZER_EVENTS","$d49bce06e58b8cea$var$playingPlayer","$d49bce06e58b8cea$export$4d41b89800e2ee57","needInitNs","visualizerListeners","Map","_playing","seeking","controlPanel","querySelector","playButton","currentTimeLabel","totalTimeLabel","seekBar","player","isPlaying","stop","start","getPlayState","pause","currentTime","textContent","seekTo","resume","initPlayerNow","newValue","initPlayer","fn","setVisualizerSelector","readyState","initNs","setLoading","setError","max","String","totalTime","soundFont","callbackObject","run","n","noteCallback","Player","SoundFontPlayer","undefined","loadSamples","setLoaded","_start","looped","playing","offset","notes","filter","note","startTime","length","keys","promise","handleStop","addVisualizer","listeners","detail","set","removeVisualizer","get","delete","finished","loop","duration","selector","values","clear","element","querySelectorAll","console","warn","disabled","title","parseFloat","customElements","define","fileInput","getElementById","blobToNoteSequence","files","then","seq","catch","reason","alert","moonIcon","sunIcon","matchMedia","matches","style","display","body","toggle"],"version":3,"file":"index.js.map"}